#########################################
# Problem Nr. 12
# The sequence of triangle numbers is generated by
# adding the natural numbers. So the 7th triangle
# number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
# The first ten terms would be:
#
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#
# Let us list the factors of the first seven triangle numbers:
#
#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number
# to have over five divisors.
#
# What is the value of the first triangle number to
# have over five hundred divisors?
#########################################

def get_factor_count(n):
    factor = 2
    factors_of  = {}
    number_of_factors = 1
    while n > 1:
        if n % factor == 0:
            n = int(n / factor)
            if factor in factors_of:
                factors_of[factor] += 1
            else:
                factors_of[factor] = 1
        else:
            factor += 1
    for v in factors_of.values():
        number_of_factors *= (v + 1)
    return number_of_factors

i = 1
factors_count = 0
while factors_count < 500:
    triangle = (i * (i + 1) / 2)
    factors_count = get_factor_count(triangle)
    i += 1

print triangle